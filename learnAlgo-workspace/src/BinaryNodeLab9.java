//package TreePackage;class BinaryNodeLab9<T> {   private T data;   private BinaryNodeLab9<T> left;   private BinaryNodeLab9<T> right;   public BinaryNodeLab9()   {      this(null); // call next constructor   } // end default constructor   public BinaryNodeLab9(T dataPortion)   {      this(dataPortion, null, null); // call next constructor   } // end constructor   public BinaryNodeLab9(T dataPortion, BinaryNodeLab9<T> leftChild,                                    BinaryNodeLab9<T> rightChild)   {      data = dataPortion;      left = leftChild;      right = rightChild;   } // end constructor   public T getData()   {      return data;   } // end getData   public void setData(T newData)   {      data = newData;   } // end setData   public BinaryNodeLab9<T> getLeftChild()   {      return left;   } // end getLeftChild   public void setLeftChild(BinaryNodeLab9<T> leftChild)   {      left = leftChild;   } // end setLeftChild   public boolean hasLeftChild()   {      return left != null;   } // end hasLeftChild   public boolean isLeaf()   {      return (left == null) && (right == null);   } // end isLeaf      public BinaryNodeLab9<T> getRightChild()   {      return right;   } // end getLeftChild   public void setRightChild(BinaryNodeLab9<T> rightChild)   {      right = rightChild;   } // end setLeftChild   public boolean hasRightChild()   {      return right != null;   } // end    public int getHeight()   {       return getHeight(this); // call private getHeight   } // end getHeight      private int getHeight(BinaryNodeLab9<T> node)   {       int height = 0;              if (node != null)			height = 1 + Math.max(getHeight(node.left), 				 getHeight(node.right));              return height;   } // end getHeight         public int getNumberOfNodes()   {       int leftNumber = 0;       int rightNumber = 0;              if (left != null)			leftNumber = left.getNumberOfNodes();              if (right != null)			rightNumber = right.getNumberOfNodes();              return 1 + leftNumber + rightNumber;   } // end getNumberOfNodes      public BinaryNodeLab9<T> copy()   {       BinaryNodeLab9<T> newRoot = new BinaryNodeLab9<T>(data);       if (left != null)			newRoot.left =  left.copy();           if (right != null)			newRoot.right = right.copy();              return newRoot;	   } // end copy   } // end BinaryNode